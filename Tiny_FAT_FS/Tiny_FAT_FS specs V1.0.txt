File: "Tiny_FAT_FS specs V1.0.txt"
Author: Eldad Hellerman
Date: 14.12.2018

This file is a specification file of the "Tiny_FAT_FS" FS.

This current implementation (V1.0) is designed for 8 bit FAT entry size, and hence 8 bit page pointers.
Page size cannot be more than 256 bytes as well, since if page is not all full with data, a byte is used to signal the amount of data in it.


Tiny_FAT_FS is designed to fit into a wide memory range starting from 128 bytes.
The page after the FAT is the root directory.

*********************************************************
**********                FAT                  **********
*********************************************************

The FAT is a table in which FAT[x] is the entry for page x. 
FAT ends at page FAT_END and has a minimum of 2 pages.

FAT entries:
	byte 0	->	indicates the memory size, page size and FAT entry size (hence the number of FAT entries, and its size)
		[0:2]	->	page size:	8		(x=0, 512kiB max, memory size: 32B - 1MiB),
								16		(x=1, 1MiB max,                64B - 2MiB),
								32		(x=2, 2MiB max,               128B - 4MiB),
								64		(x=3, 4MiB max,               256B - 8MiB),
								128		(x=4, 8MiB max,               512B - 16MiB),
								************256		(x=5, 16MiB max,              1kiB - 32MiB), //currently not supported because if there are less than 64 pages then data
																								//size in page is represented by 7 bits - up to 128 bits per page.
								************512		(x=6, 32MiB max,              2kiB - 64MiB),   //currently not supported so that
								************1024	(x=7, 64MiB max,              4kiB - 128MiB). //page data size is 1 byte
		[3:6]	->	memory size = 2^(value+5+x) - 32 bytes to 128MiB.
					value cant be 15 since this will cause memory size to be 2 times more than what the FAT allows for,
					so it can be used as an indicator for a future version of the FS.
		[7]	->	FAT entry size:
					0 is 1 byte
					1 is 2 bytes
	byte 1:
		if FAT entry size is 1 byte this is like FAT[1],
		else its free and can extend memory and page size bits, and even FAT entry size. 
	
	FAT[1]	->	pointer for volume name
	
	FAT[2]:FAT[FAT_END]	->	free because pages are used by FAT 

Entry values 0 and 1 are free because are pages used by FAT, and 2 is free because no page will have the root folder continue it.

Entry values:
	if amount_of_pages <= 64:
		0		page is free
		1-63	next page
		[7]	1 if there isnt another page, then the data size is in bits [0:6]
		[6] 
		//////////////////////////////////////////////////		here		///////////////////////////////////////////////////////////////////////////
	else:
		0	page is free	
		1	if there isn't another page, but there's less than PAGE_SIZE bytes used in this page,
			and the last byte in page is used to indicate the amount of bytes that are used.
		2	if there isn't another page, and all PAGE_SIZE bytes in page are used.
		3/3-8	free to signal other things, because are used by FAT
		3-(FAT_END+1)		free to signal other things, because are used by FAT


*********************************************************
**********             Structures              **********
*********************************************************

directory:
	directory entries, each is 2 bytes
	directory page back pointer - if this is last page in directory structure (its FAT entry indicates so).

directory entry, 2 bytes:
	1 - directory entry pointer
	[7]		->	1 if points to directory.
				0 if points to file.
	[0:6] - directory name pointer, with MSB set.
	
*********************************************************
**********             Procedures              **********
*********************************************************

Measuring a file's size:
	follow file pages link, and for each page:
		if there is a next page, add PAGE_SIZE bytes to count, and go to that page to repeat the steps.
		if there isn't a next page:
			with address 1: add the amount indicated by the length byte (the last byte) to count.
			with address 2: add PAGE_SIZE bytes to count

Measuring amount of free memory:
	count the number of FAT entries that are 0 (except for first few entries), and multiply by PAGE_SIZE.

*********************************************************
**********        Free areas of memory         **********
*********************************************************

*********************************************************
**********             Improvements            **********
*********************************************************	

have a page pointer in directory structure which points to a page, in which each  "entry" is the file properties of the file in the corresponding directory page.
or file name can start with a special character if the first few bytes are file attributes, such as:
	-different dates and times
	-permission attributes - like admin for writing or executing
	-whether name is uni-code
	-etc...

file name can be pointed to by another pointer in the files directory entry (2 bytes per entry) - which is the current implementation,
	or can be at the start of data, in which it is indicated to be the files name by setting bit 7 in its page FAT entry
	(1 byte per entry) - but this would also limit the amount of pages to a maximum of 128 (2kB), instead of 256 (4kB).
for 8kiB of memory, a FAT entry can be increased to 2 bytes - which would allow for up to
	 1MB with 16 bytes pages, 4MB with 64 bytes pages, and and 32MB with 512 bytes pages.
	
page size maximum 256 bytes. if FAT is 0 then free, 1 then page is full, 2 then PAGE_SIZE-1, 3 then last 2 bytes indicate amount of data in that page. 

